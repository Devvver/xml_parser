import streamlit as st
import time
import csv
import io
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import requests
from xml.etree import ElementTree

st.set_page_config(page_title="Sitemap  Checker", layout="wide")
st.title("üï∑Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Sitemap")

domain = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)")
delay = st.number_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)", min_value=0, max_value=30, value=1)

user_agent = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç",
                           value="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö URL –∏–∑ –∫–∞—Ä—Ç—ã —Å–∞–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ElementTree (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
def get_sitemap_urls(domain):
    sitemap_url = f"{domain}/sitemap.xml"
    try:
        response = requests.get(sitemap_url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        tree = ElementTree.fromstring(response.content)

        urls = []

        # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã —Å–∞–π—Ç–∞
        if tree.tag.endswith("sitemapindex"):
            for sitemap in tree.findall(".//{http://www.sitemaps.org/schemas/sitemap/0.9}loc"):
                loc = sitemap.text
                if loc:
                    urls.extend(get_sitemap_urls(loc))  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–∞–π—Ç–æ–≤
        else:
            # –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–∞–π—Ç–∞
            for url in tree.findall(".//{http://www.sitemaps.org/schemas/sitemap/0.9}loc"):
                loc = url.text
                if loc:
                    urls.append(loc)
        return urls
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ sitemap: {e}")
        return []

if st.button("–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"):
    if not domain.startswith("http"):
        domain = "https://" + domain

    st.write(f"–ó–∞–≥—Ä—É–∂–∞–µ–º sitemap —Å: `{domain}`")

    urls = get_sitemap_urls(domain)

    if not urls:
        st.warning("–°—Å—ã–ª–∫–∏ –≤ –∫–∞—Ä—Ç–µ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(urls)} URL –≤ sitemap.")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium
        options = Options()
        options.add_argument("--start-maximized")  # –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤ headless-—Ä–µ–∂–∏–º–µ
        options.add_argument(f"user-agent={user_agent}")  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç
        options.add_argument("--disable-infobars")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        options.add_argument("--headless")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º headless —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI

        driver = webdriver.Chrome(options=options)

        progress = st.progress(0)
        status_text = st.empty()
        time_text = st.empty()
        results = []
        start_time = time.time()

        def get_status_code(url):
            try:
                response = requests.head(url, allow_redirects=True)
                return response.status_code
            except requests.exceptions.RequestException:
                return None

        for idx, url in enumerate(urls):
            try:
                status_code = get_status_code(url)
                driver.get(url)
                time.sleep(2)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–ª–∞ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è
                page_title = driver.title  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ç—É–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            except Exception:
                status_code = "0"
                page_title = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å"

            results.append((url, status_code, page_title))

            elapsed = time.time() - start_time
            remaining = (len(urls) - idx - 1) * (delay + 2)

            status_text.markdown(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: `{idx + 1} / {len(urls)}` ‚Äî URL: **{url}**, –°—Ç–∞—Ç—É—Å: **{status_code}**, –¢–∞–π—Ç–ª: **{page_title}**")
            time_text.markdown(f"‚è± –í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ: `{int(elapsed)} —Å–µ–∫`, –æ—Å—Ç–∞–ª–æ—Å—å: ~`{int(remaining)} —Å–µ–∫`")
            progress.progress((idx + 1) / len(urls))
            time.sleep(delay)

        driver.quit()
        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ!")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        csv_buffer = io.StringIO()
        writer = csv.writer(csv_buffer)
        writer.writerow(["URL", "–°—Ç–∞—Ç—É—Å", "–¢–∞–π—Ç–ª"])
        writer.writerows(results)
        csv_data = csv_buffer.getvalue()

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)",
            data=csv_data,
            file_name="selenium_sitemap_check.csv",
            mime="text/csv"
        )
